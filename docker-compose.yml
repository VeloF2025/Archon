# Docker Compose profiles:
# - Default (no profile): Starts archon-server, archon-mcp, and archon-frontend
# - Agents are opt-in: archon-agents starts only with the "agents" profile
# Usage:
#   docker compose up                        # Starts server, mcp, frontend (agents disabled)
#   docker compose --profile agents up -d    # Also starts archon-agents

services:
  # Redis Service - Caching and Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: archon-redis
    # No external port mapping needed - only internal access
    networks:
      - app-network
    volumes:
      - redis-data:/data
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  # Qdrant Vector Database - High-performance similarity search
  qdrant:
    image: qdrant/qdrant:v1.7.3
    container_name: archon-qdrant
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    networks:
      - app-network
    volumes:
      - qdrant-storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__SERVICE__MAX_REQUEST_SIZE_MB=32
      - QDRANT__STORAGE__PERFORMANCE__SEARCH_BATCH_SIZE=100
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  # Server Service (FastAPI + Socket.IO + Crawling)
  archon-server:
    build:
      context: ./python
      dockerfile: Dockerfile.server
      args:
        BUILDKIT_INLINE_CACHE: 1
        ARCHON_SERVER_PORT: ${ARCHON_SERVER_PORT:-8181}
    container_name: archon-server
    ports:
      - "${ARCHON_SERVER_PORT:-8181}:${ARCHON_SERVER_PORT:-8181}"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      # - OPENAI_API_KEY=${OPENAI_API_KEY:-}  # Temporarily disabled - can be set via UI
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
      - SERVICE_DISCOVERY_MODE=docker_compose
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - ARCHON_MCP_PORT=${ARCHON_MCP_PORT:-8051}
      - ARCHON_AGENTS_PORT=${ARCHON_AGENTS_PORT:-8052}
      - AGENTS_ENABLED=${AGENTS_ENABLED:-false}
      - REDIS_URL=redis://redis:6379
      # Qdrant Vector Database Configuration
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_COLLECTION_NAME=archon_documents
      - QDRANT_ENABLED=true
      # Tool Update Monitoring System Configuration
      - TOOL_UPDATE_MONITORING_ENABLED=true
      - UPDATE_DISCOVERY_INTERVAL=6  # hours
      - SECURITY_SCAN_INTERVAL=12  # hours
      - EMAIL_DIGEST_ENABLED=false  # Set to true when SMTP configured
    networks:
      - app-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Docker socket for MCP container control
      - ./python/src:/app/src # Mount source code for hot reload
      - ./python/tests:/app/tests # Mount tests for UI test execution
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    command: >
      sh -c "
        pip install email-validator>=2.0.0 &&
        python -m uvicorn src.server.main:socket_app --host 0.0.0.0 --port ${ARCHON_SERVER_PORT:-8181} --reload
      "
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          'python -c "import urllib.request; urllib.request.urlopen(''http://localhost:${ARCHON_SERVER_PORT:-8181}/health'')"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Lightweight MCP Server Service (HTTP-based)
  archon-mcp:
    build:
      context: ./python
      dockerfile: Dockerfile.mcp
      args:
        BUILDKIT_INLINE_CACHE: 1
        ARCHON_MCP_PORT: ${ARCHON_MCP_PORT:-8051}
    container_name: archon-mcp
    ports:
      - "${ARCHON_MCP_PORT:-8051}:${ARCHON_MCP_PORT:-8051}"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
      - SERVICE_DISCOVERY_MODE=docker_compose
      - TRANSPORT=sse
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # MCP needs to know where to find other services
      - API_SERVICE_URL=http://archon-server:${ARCHON_SERVER_PORT:-8181}
      - AGENTS_ENABLED=${AGENTS_ENABLED:-false}
      - AGENTS_SERVICE_URL=${AGENTS_SERVICE_URL:-http://archon-agents:${ARCHON_AGENTS_PORT:-8052}}
      - ARCHON_MCP_PORT=${ARCHON_MCP_PORT:-8051}
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - ARCHON_AGENTS_PORT=${ARCHON_AGENTS_PORT:-8052}
    networks:
      - app-network
    depends_on:
      archon-server:
        condition: service_healthy
      
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          'python -c "import socket; s=socket.socket(); s.connect((''localhost'', ${ARCHON_MCP_PORT:-8051})); s.close()"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s # Give dependencies time to start

  # AI Agents Service (ML/Reranking)
  archon-agents:
    profiles:
      - agents  # Only starts when explicitly using --profile agents
    build:
      context: ./python
      dockerfile: Dockerfile.agents
      args:
        BUILDKIT_INLINE_CACHE: 1
        ARCHON_AGENTS_PORT: ${ARCHON_AGENTS_PORT:-8052}
    container_name: archon-agents
    ports:
      - "${ARCHON_AGENTS_PORT:-8052}:${ARCHON_AGENTS_PORT:-8052}"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      # - OPENAI_API_KEY=${OPENAI_API_KEY:-}  # Temporarily disabled - can be set via UI
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
      - SERVICE_DISCOVERY_MODE=docker_compose
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ARCHON_AGENTS_PORT=${ARCHON_AGENTS_PORT:-8052}
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          'python -c "import urllib.request; urllib.request.urlopen(''http://localhost:${ARCHON_AGENTS_PORT:-8052}/health'')"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # External Validator Service (Phase 5)
  archon-validator:
    profiles:
      - validator  # Only starts when explicitly using --profile validator
    build:
      context: ./python
      dockerfile: Dockerfile.validator
      args:
        BUILDKIT_INLINE_CACHE: 1
        VALIDATOR_PORT: ${VALIDATOR_PORT:-8053}
    container_name: archon-validator
    ports:
      - "${VALIDATOR_PORT:-8053}:${VALIDATOR_PORT:-8053}"
    environment:
      # ALL VALIDATOR CONFIG MUST COME FROM SUPABASE - NO HARDCODING
      # - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}           # REMOVED
      # - OPENAI_API_KEY=${OPENAI_API_KEY:-}               # REMOVED
      # - VALIDATOR_LLM_PROVIDER=${VALIDATOR_LLM_PROVIDER:-deepseek}  # REMOVED
      # - VALIDATOR_MODEL=${VALIDATOR_MODEL:-deepseek-chat}            # REMOVED
      # - VALIDATOR_TEMPERATURE=${VALIDATOR_TEMPERATURE:-0.1}          # REMOVED
      - VALIDATOR_CONFIDENCE_THRESHOLD=${VALIDATOR_CONFIDENCE_THRESHOLD:-0.9}  # Keep for validation logic
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ARCHON_MCP_PORT=${ARCHON_MCP_PORT:-8051}
      - ARCHON_SERVER_URL=http://archon-server:8181  # For fetching credentials from Supabase
    networks:
      - app-network
    volumes:
      - ./python/src/agents/external_validator:/app/external_validator
      - ./python/src/agents/validation:/app/validation  # Access to existing validation
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${VALIDATOR_PORT:-8053}/health"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Frontend
  archon-frontend:
    build: ./archon-ui-main
    container_name: archon-ui
    ports:
      - "${ARCHON_UI_PORT:-3737}:3737"
    environment:
      - VITE_API_URL=http://${HOST:-localhost}:${ARCHON_SERVER_PORT:-8181}
      - VITE_ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - HOST=${HOST:-localhost}
      - PROD=${PROD:-false}
      - VITE_ALLOWED_HOSTS=${VITE_ALLOWED_HOSTS:-}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3737"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes: []
    depends_on:
      archon-server:
        condition: service_healthy

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
  qdrant-storage:
