version: '3.8'

services:
  # Redis for distributed messaging and caching
  redis:
    image: redis:7-alpine
    container_name: archon-phase7-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - archon-phase7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: archon-phase7-rabbitmq
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: archon
      RABBITMQ_DEFAULT_PASS: archon_phase7
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - archon-phase7
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL with pgvector for embeddings
  postgres:
    image: pgvector/pgvector:pg16
    container_name: archon-phase7-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: archon
      POSTGRES_PASSWORD: archon_phase7
      POSTGRES_DB: archon_agents
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - archon-phase7
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U archon -d archon_agents"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent Orchestrator Service
  agent-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.phase7
      target: orchestrator
    container_name: archon-phase7-orchestrator
    ports:
      - "8500:8500"  # HTTP API
      - "8501:8501"  # WebSocket
    environment:
      SERVICE_NAME: orchestrator
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: archon
      RABBITMQ_PASS: archon_phase7
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: archon
      POSTGRES_PASSWORD: archon_phase7
      POSTGRES_DB: archon_agents
      LOG_LEVEL: INFO
      ENABLE_GPU: ${ENABLE_GPU:-false}
      CUDA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES:-}
    volumes:
      - ./python/src:/app/src
      - ./python/config:/app/config
      - agent-logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - archon-phase7
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Task Executor Agent Pool
  task-executor:
    build:
      context: .
      dockerfile: Dockerfile.phase7
      target: agent
    container_name: archon-phase7-executor
    environment:
      SERVICE_NAME: task-executor
      AGENT_TYPE: TASK_EXECUTOR
      ORCHESTRATOR_URL: http://agent-orchestrator:8500
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: archon
      RABBITMQ_PASS: archon_phase7
      MAX_CONCURRENT_TASKS: 5
      LOG_LEVEL: INFO
    volumes:
      - ./python/src:/app/src
      - ./python/config:/app/config
      - agent-workspace:/app/workspace
    depends_on:
      - agent-orchestrator
    networks:
      - archon-phase7
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Swarm Intelligence Coordinator
  swarm-coordinator:
    build:
      context: .
      dockerfile: Dockerfile.phase7
      target: agent
    container_name: archon-phase7-swarm
    environment:
      SERVICE_NAME: swarm-coordinator
      AGENT_TYPE: SWARM_MEMBER
      ORCHESTRATOR_URL: http://agent-orchestrator:8500
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SWARM_SIZE: 20
      ALGORITHM: PARTICLE_SWARM
      LOG_LEVEL: INFO
    volumes:
      - ./python/src:/app/src
      - ./python/config:/app/config
    depends_on:
      - agent-orchestrator
    networks:
      - archon-phase7
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # ML Training Agent (with GPU support)
  ml-trainer:
    build:
      context: .
      dockerfile: Dockerfile.phase7
      target: ml-agent
    container_name: archon-phase7-ml-trainer
    environment:
      SERVICE_NAME: ml-trainer
      AGENT_TYPE: ML_TRAINER
      ORCHESTRATOR_URL: http://agent-orchestrator:8500
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: archon
      POSTGRES_PASSWORD: archon_phase7
      POSTGRES_DB: archon_agents
      ENABLE_GPU: ${ENABLE_GPU:-false}
      CUDA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES:-0}
      TF_FORCE_GPU_ALLOW_GROWTH: true
      LOG_LEVEL: INFO
    volumes:
      - ./python/src:/app/src
      - ./python/config:/app/config
      - model-storage:/app/models
      - dataset-storage:/app/datasets
    depends_on:
      - agent-orchestrator
    networks:
      - archon-phase7
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Communication Hub
  comm-hub:
    build:
      context: .
      dockerfile: Dockerfile.phase7
      target: agent
    container_name: archon-phase7-comm-hub
    ports:
      - "8510:8510"  # Communication API
    environment:
      SERVICE_NAME: comm-hub
      AGENT_TYPE: COORDINATOR
      ORCHESTRATOR_URL: http://agent-orchestrator:8500
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: archon
      RABBITMQ_PASS: archon_phase7
      ENABLE_ALL_PROTOCOLS: true
      LOG_LEVEL: INFO
    volumes:
      - ./python/src:/app/src
      - ./python/config:/app/config
    depends_on:
      - agent-orchestrator
    networks:
      - archon-phase7
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Monitoring and Metrics (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: archon-phase7-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - archon-phase7

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: archon-phase7-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: archon_phase7
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - archon-phase7

  # Jupyter Lab for experimentation
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.phase7
      target: jupyter
    container_name: archon-phase7-jupyter
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: archon_phase7
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    volumes:
      - ./python/src:/app/src
      - ./python/notebooks:/app/notebooks
      - ./python/config:/app/config
      - model-storage:/app/models
      - dataset-storage:/app/datasets
    networks:
      - archon-phase7
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

networks:
  archon-phase7:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
  postgres-data:
    driver: local
  agent-logs:
    driver: local
  agent-workspace:
    driver: local
  model-storage:
    driver: local
  dataset-storage:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local