# Optimized Server Service Dockerfile - Fixes neo4j installation timeout

# Stage 1: Install base requirements including neo4j
FROM python:3.11-slim AS base-builder

WORKDIR /build

# Install only essential packages first (including neo4j)
COPY requirements.base.txt .
RUN pip install --no-cache-dir -r requirements.base.txt

# Stage 2: Install remaining requirements
FROM python:3.11 AS full-builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy base packages from first stage
COPY --from=base-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages

# Install remaining requirements
COPY requirements.server.txt .
RUN pip install --user --no-cache-dir -r requirements.server.txt || true

# Runtime stage
FROM python:3.11-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    wget \
    ca-certificates \
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libatspi2.0-0 \
    redis-server \
    supervisor \
    libcups2 \
    libdbus-1-3 \
    libdrm2 \
    libgbm1 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libwayland-client0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxkbcommon0 \
    libxrandr2 \
    xdg-utils \
    curl \
    gnupg \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install Node.js 20 for Gemini CLI
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install Gemini CLI globally
RUN npm install -g @google/gemini-cli

# Configure Redis
RUN mkdir -p /var/lib/redis /var/log/redis /var/log/supervisor /etc/supervisor/conf.d && \
    chown -R redis:redis /var/lib/redis /var/log/redis && \
    sed -i 's/^bind .*/bind 127.0.0.1/' /etc/redis/redis.conf && \
    sed -i 's/^protected-mode yes/protected-mode no/' /etc/redis/redis.conf && \
    sed -i 's/^# maxmemory <bytes>/maxmemory 256mb/' /etc/redis/redis.conf && \
    sed -i 's/^# maxmemory-policy noeviction/maxmemory-policy allkeys-lru/' /etc/redis/redis.conf

# Copy Python packages from both builder stages
COPY --from=base-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=full-builder /root/.local /root/.local

# Ensure neo4j is available
RUN python -c "import neo4j; print('neo4j package verified')" || pip install --no-cache-dir neo4j>=5.15.0

# Install Playwright browsers
ENV PATH=/root/.local/bin:$PATH
RUN playwright install chromium || true

# Copy MANIFEST.md (REQUIRED for Archon operation)
COPY MANIFEST.md /app/MANIFEST.md

# Copy configuration files
COPY redis.conf /etc/redis/redis.conf
COPY entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Create necessary directories and set permissions
RUN mkdir -p /var/log/supervisor /var/log/redis /var/run/redis /var/lib/redis && \
    chown redis:redis /var/log/redis /var/run/redis /var/lib/redis

# Copy application code
COPY src/ src/
COPY tests/ tests/

# Set environment variables
ENV PYTHONPATH="/app:/root/.local/lib/python3.11/site-packages:$PYTHONPATH"
ENV PYTHONUNBUFFERED=1

# Expose Server port
ARG ARCHON_SERVER_PORT=8181
ENV ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT}
EXPOSE ${ARCHON_SERVER_PORT}

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD sh -c "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:${ARCHON_SERVER_PORT}/health')\""

# Run the server directly
CMD python -m uvicorn src.server.main:socket_app --host 0.0.0.0 --port ${ARCHON_SERVER_PORT:-8181} --workers 1