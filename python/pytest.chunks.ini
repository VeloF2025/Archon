[tool:pytest]
# Pytest Configuration for Chunks Count TDD Test Suite
# 
# This configuration is specifically tailored for Test-Driven Development
# of the chunks count discrepancy fix.

# Test discovery
testpaths = tests
python_files = test_chunks_*.py test_*chunks*.py
python_classes = Test*
python_functions = test_*

# Output and reporting
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --durations-min=1.0
    --cov=src/server/services/knowledge
    --cov-report=html:htmlcov/chunks_count
    --cov-report=term-missing
    --cov-report=json:coverage-chunks.json
    --cov-fail-under=95
    --cov-branch
    --junitxml=test-results-chunks.xml

# Test markers for TDD workflow
markers =
    failing_by_design: Tests designed to fail initially (Red phase of TDD)
    performance: Tests that validate performance requirements (<100ms, <500ms targets)
    integration: Tests that require multiple components working together  
    slow: Tests that may take longer than 5 seconds
    unit: Fast unit tests that can run in isolation
    data_integrity: Tests that validate data consistency and integrity
    api_integration: Tests that validate API endpoint behavior
    database: Tests that require database operations
    tdd_red: Tests in Red phase - should fail initially
    tdd_green: Tests in Green phase - should pass after implementation
    tdd_refactor: Tests for Refactor phase - ensure behavior maintained during optimization

# Minimum versions
minversion = 6.0

# Test timeout (prevent hanging tests)
timeout = 300
timeout_method = thread

# Ignore warnings from dependencies during TDD
filterwarnings =
    ignore::UserWarning:supabase.*
    ignore::DeprecationWarning:asyncio.*
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Test environment variables
env =
    TESTING = true
    TEST_MODE = true
    PYTEST_CURRENT_TEST = {testname}
    TDD_PHASE = red  # Override with green/refactor as needed

# Parallel test execution (for faster feedback)
# Uncomment when tests are stable
# -n auto
# --dist worksteal

# Test collection strategy for TDD
collect_ignore = [
    "setup.py",
    "conftest.py.bak",
    "**/node_modules/**",
    "**/.venv/**",
    "**/venv/**"
]

# Console output formatting
console_output_style = progress
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] [%(name)s] %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test discovery patterns specifically for chunks count tests
python_files = 
    test_chunks_count_service.py
    test_data_integrity_chunks.py
    test_performance_chunks_count.py
    test_api_integration_chunks.py

# Custom test result output
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = true

# Coverage settings optimized for TDD
[coverage:run]
source = src/server/services/knowledge
branch = true
parallel = true
concurrency = thread,multiprocessing

[coverage:paths]
source = 
    src/server/services/knowledge/
    */site-packages/src/server/services/knowledge/

[coverage:report]
show_missing = true
precision = 2
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov/chunks_count
title = Chunks Count Fix - Test Coverage Report

[coverage:json]
output = coverage-chunks.json
pretty_print = true