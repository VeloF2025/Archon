id: "react-typescript-app"
metadata:
  name: "React TypeScript Application"
  description: "Modern React application with TypeScript, Vite, TailwindCSS, and comprehensive tooling setup"
  version: "1.0.0"
  author: "Archon AI"
  type: "project"
  category: "frontend"
  tags: ["react", "typescript", "vite", "tailwindcss", "modern"]
  downloads: 0
  rating: 5.0
  created_at: 2024-01-01T00:00:00Z
  updated_at: 2024-01-01T00:00:00Z

variables:
  - name: "project_name"
    type: "string"
    required: true
    description: "The name of your React project"
    default: "my-react-app"
    validation_regex: "^[a-z][a-z0-9-]*$"
  
  - name: "project_description"
    type: "string"
    required: false
    description: "Brief description of your project"
    default: "A modern React application"
  
  - name: "author_name"
    type: "string"
    required: false
    description: "Your name as the project author"
    default: "Developer"
  
  - name: "author_email"
    type: "string"
    required: false
    description: "Your email address"
    default: "developer@example.com"
  
  - name: "use_router"
    type: "boolean"
    required: false
    description: "Include React Router for navigation"
    default: true
  
  - name: "ui_framework"
    type: "select"
    required: false
    description: "UI component framework to include"
    options: ["tailwindcss", "shadcn", "mui", "none"]
    default: "tailwindcss"
  
  - name: "state_management"
    type: "select"
    required: false
    description: "State management solution"
    options: ["zustand", "redux-toolkit", "context", "none"]
    default: "zustand"
  
  - name: "testing_framework"
    type: "multiselect"
    required: false
    description: "Testing frameworks to include"
    options: ["vitest", "playwright", "storybook"]
    default: ["vitest", "playwright"]

directory_structure:
  - "src"
  - "src/components"
  - "src/components/ui"
  - "src/hooks"
  - "src/services" 
  - "src/types"
  - "src/utils"
  - "src/styles"
  - "public"
  - "tests"
  - "tests/unit"
  - "tests/e2e"

files:
  - path: "package.json"
    content: |
      {
        "name": "{{project_name}}",
        "private": true,
        "version": "0.0.0",
        "description": "{{project_description}}",
        "author": "{{author_name}} <{{author_email}}>",
        "type": "module",
        "scripts": {
          "dev": "vite",
          "build": "tsc && vite build",
          "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
          "lint:fix": "eslint . --ext ts,tsx --fix",
          "preview": "vite preview",
          "type-check": "tsc --noEmit",
          "test": "vitest",
          "test:coverage": "vitest --coverage",
          "test:e2e": "playwright test",
          "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json,css,md}\""
        },
        "dependencies": {
          "react": "^18.2.0",
          "react-dom": "^18.2.0"
        },
        "devDependencies": {
          "@types/react": "^18.2.43",
          "@types/react-dom": "^18.2.17",
          "@typescript-eslint/eslint-plugin": "^6.14.0",
          "@typescript-eslint/parser": "^6.14.0",
          "@vitejs/plugin-react": "^4.2.1",
          "eslint": "^8.55.0",
          "eslint-plugin-react-hooks": "^4.6.0",
          "eslint-plugin-react-refresh": "^0.4.5",
          "prettier": "^3.1.1",
          "typescript": "^5.2.2",
          "vite": "^5.0.8"
        }
      }
    overwrite: true
  
  - path: "tsconfig.json"
    content: |
      {
        "compilerOptions": {
          "target": "ES2020",
          "useDefineForClassFields": true,
          "lib": ["ES2020", "DOM", "DOM.Iterable"],
          "module": "ESNext",
          "skipLibCheck": true,
          "moduleResolution": "bundler",
          "allowImportingTsExtensions": true,
          "resolveJsonModule": true,
          "isolatedModules": true,
          "noEmit": true,
          "jsx": "react-jsx",
          "strict": true,
          "noUnusedLocals": true,
          "noUnusedParameters": true,
          "noFallthroughCasesInSwitch": true,
          "baseUrl": ".",
          "paths": {
            "@/*": ["./src/*"],
            "@/components/*": ["./src/components/*"],
            "@/hooks/*": ["./src/hooks/*"],
            "@/services/*": ["./src/services/*"],
            "@/types/*": ["./src/types/*"],
            "@/utils/*": ["./src/utils/*"]
          }
        },
        "include": ["src"],
        "references": [{ "path": "./tsconfig.node.json" }]
      }
    overwrite: true

  - path: "tsconfig.node.json"
    content: |
      {
        "compilerOptions": {
          "composite": true,
          "skipLibCheck": true,
          "module": "ESNext",
          "moduleResolution": "bundler",
          "allowSyntheticDefaultImports": true
        },
        "include": ["vite.config.ts"]
      }
    overwrite: true

  - path: "vite.config.ts"
    content: |
      import { defineConfig } from 'vite'
      import react from '@vitejs/plugin-react'
      import path from 'path'

      // https://vitejs.dev/config/
      export default defineConfig({
        plugins: [react()],
        resolve: {
          alias: {
            '@': path.resolve(__dirname, './src'),
          },
        },
        server: {
          port: 3000,
          open: true,
        },
        build: {
          sourcemap: true,
          rollupOptions: {
            output: {
              manualChunks: {
                vendor: ['react', 'react-dom'],
              },
            },
          },
        },
      })
    overwrite: true

  - path: "src/main.tsx"
    content: |
      import React from 'react'
      import ReactDOM from 'react-dom/client'
      import App from './App.tsx'
      import './styles/index.css'

      ReactDOM.createRoot(document.getElementById('root')!).render(
        <React.StrictMode>
          <App />
        </React.StrictMode>,
      )
    overwrite: true

  - path: "src/App.tsx"
    content: |
      import React from 'react'
      import { Counter } from './components/Counter'
      import './styles/App.css'

      function App() {
        return (
          <div className="min-h-screen bg-gray-50 py-8">
            <div className="container mx-auto px-4">
              <header className="text-center mb-8">
                <h1 className="text-4xl font-bold text-gray-900 mb-4">
                  {{project_name}}
                </h1>
                <p className="text-xl text-gray-600">
                  {{project_description}}
                </p>
              </header>
              
              <main className="max-w-2xl mx-auto">
                <div className="bg-white rounded-lg shadow-md p-8">
                  <Counter />
                  
                  <div className="mt-8 text-center">
                    <p className="text-gray-600">
                      Edit <code className="bg-gray-100 px-2 py-1 rounded">src/App.tsx</code> and save to test HMR
                    </p>
                  </div>
                  
                  <div className="mt-8 text-center">
                    <a
                      className="text-blue-600 hover:text-blue-800 underline"
                      href="https://reactjs.org"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      Learn React
                    </a>
                    <span className="mx-2">|</span>
                    <a
                      className="text-blue-600 hover:text-blue-800 underline"
                      href="https://vitejs.dev"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      Vite Docs
                    </a>
                    <span className="mx-2">|</span>
                    <a
                      className="text-blue-600 hover:text-blue-800 underline"
                      href="https://www.typescriptlang.org/"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      TypeScript
                    </a>
                  </div>
                </div>
              </main>
            </div>
          </div>
        )
      }

      export default App
    overwrite: true

  - path: "src/components/Counter.tsx"
    content: |
      import React, { useState } from 'react'

      export const Counter: React.FC = () => {
        const [count, setCount] = useState(0)

        return (
          <div className="text-center">
            <h2 className="text-2xl font-semibold mb-4">Counter Example</h2>
            <div className="flex items-center justify-center gap-4">
              <button
                className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors"
                onClick={() => setCount(count - 1)}
              >
                -
              </button>
              <span className="text-3xl font-bold text-gray-800 min-w-[3rem]">
                {count}
              </span>
              <button
                className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors"
                onClick={() => setCount(count + 1)}
              >
                +
              </button>
            </div>
            <button
              className="mt-4 bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-md transition-colors"
              onClick={() => setCount(0)}
            >
              Reset
            </button>
          </div>
        )
      }
    overwrite: true

  - path: "src/styles/index.css"
    content: |
      @tailwind base;
      @tailwind components;
      @tailwind utilities;

      :root {
        font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
        line-height: 1.5;
        font-weight: 400;
        color-scheme: light dark;
        color: rgba(255, 255, 255, 0.87);
        background-color: #242424;
        font-synthesis: none;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        -webkit-text-size-adjust: 100%;
      }

      @media (prefers-color-scheme: light) {
        :root {
          color: #213547;
          background-color: #ffffff;
        }
      }

      * {
        box-sizing: border-box;
      }

      body {
        margin: 0;
        display: flex;
        place-items: center;
        min-width: 320px;
        min-height: 100vh;
      }

      #root {
        width: 100%;
      }
    overwrite: true

  - path: "src/styles/App.css"
    content: |
      /* App-specific styles */
      .container {
        max-width: 1200px;
      }

      code {
        border-radius: 4px;
        padding: 0.25rem 0.5rem;
        background-color: #f3f4f6;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        font-size: 0.875rem;
      }

      @media (prefers-color-scheme: dark) {
        code {
          background-color: #374151;
          color: #e5e7eb;
        }
      }
    overwrite: true

  - path: "index.html"
    content: |
      <!doctype html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <link rel="icon" type="image/svg+xml" href="/vite.svg" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>{{project_name}}</title>
          <meta name="description" content="{{project_description}}" />
        </head>
        <body>
          <div id="root"></div>
          <script type="module" src="/src/main.tsx"></script>
        </body>
      </html>
    overwrite: true

  - path: "public/vite.svg"
    content: |
      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
    overwrite: true

  - path: ".eslintrc.cjs"
    content: |
      module.exports = {
        root: true,
        env: { browser: true, es2020: true },
        extends: [
          'eslint:recommended',
          '@typescript-eslint/recommended',
          'plugin:react-hooks/recommended',
        ],
        ignorePatterns: ['dist', '.eslintrc.cjs'],
        parser: '@typescript-eslint/parser',
        plugins: ['react-refresh'],
        rules: {
          'react-refresh/only-export-components': [
            'warn',
            { allowConstantExport: true },
          ],
          '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
          'no-console': ['warn', { allow: ['warn', 'error'] }],
        },
      }
    overwrite: true

  - path: ".prettierrc"
    content: |
      {
        "semi": false,
        "singleQuote": true,
        "tabWidth": 2,
        "trailingComma": "es5",
        "printWidth": 100,
        "bracketSpacing": true,
        "arrowParens": "avoid"
      }
    overwrite: true

  - path: "README.md"
    content: |
      # {{project_name}}

      {{project_description}}

      ## 🚀 Getting Started

      ### Prerequisites

      - Node.js 18+ 
      - npm or yarn

      ### Installation

      ```bash
      # Install dependencies
      npm install

      # Start development server
      npm run dev

      # Build for production
      npm run build
      ```

      ## 📁 Project Structure

      ```
      {{project_name}}/
      ├── src/
      │   ├── components/     # Reusable UI components
      │   ├── hooks/         # Custom React hooks
      │   ├── services/      # API services and utilities
      │   ├── styles/        # CSS and styling files
      │   ├── types/         # TypeScript type definitions
      │   └── utils/         # Helper functions
      ├── public/            # Static assets
      ├── tests/             # Test files
      └── package.json
      ```

      ## 🛠 Available Scripts

      - `npm run dev` - Start development server
      - `npm run build` - Build for production
      - `npm run preview` - Preview production build
      - `npm run lint` - Run ESLint
      - `npm run lint:fix` - Fix ESLint errors
      - `npm run type-check` - Check TypeScript types
      - `npm run test` - Run unit tests
      - `npm run test:coverage` - Run tests with coverage
      - `npm run test:e2e` - Run E2E tests
      - `npm run format` - Format code with Prettier

      ## 🧰 Tech Stack

      - **React 18** - UI library
      - **TypeScript** - Type safety
      - **Vite** - Build tool
      - **TailwindCSS** - Utility-first CSS
      - **ESLint** - Code linting
      - **Prettier** - Code formatting
      {{#if testing_framework}}
      - **Testing**: {{#each testing_framework}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}
      {{/if}}

      ## 📝 Development Guidelines

      - Use TypeScript for all components and utilities
      - Follow the established folder structure
      - Write tests for critical functionality
      - Use semantic commit messages
      - Ensure code passes linting and type checking

      ---

      Created with ❤️ by {{author_name}}
    overwrite: true

  - path: ".gitignore"
    content: |
      # Logs
      logs
      *.log
      npm-debug.log*
      yarn-debug.log*
      yarn-error.log*
      pnpm-debug.log*
      lerna-debug.log*

      node_modules
      dist
      dist-ssr
      *.local

      # Editor directories and files
      .vscode/*
      !.vscode/extensions.json
      .idea
      .DS_Store
      *.suo
      *.ntvs*
      *.njsproj
      *.sln
      *.sw?

      # Environment variables
      .env
      .env.local
      .env.development.local
      .env.test.local
      .env.production.local

      # Testing
      coverage/
      .nyc_output
      test-results/
      playwright-report/
      playwright/.cache/

      # OS generated files
      Thumbs.db
    overwrite: true

pre_generate_hooks:
  - name: "validate_project_name"
    command: "echo 'Validating project name: {{project_name}}'"
    working_directory: "."
    timeout: 10
    failure_mode: "continue"

post_generate_hooks:
  - name: "install_dependencies"
    command: "npm install"
    working_directory: "."
    timeout: 120
    failure_mode: "warn"
    
  - name: "install_tailwind_if_selected"
    command: "if [ '{{ui_framework}}' = 'tailwindcss' ]; then npm install -D tailwindcss postcss autoprefixer && npx tailwindcss init -p; fi"
    working_directory: "."
    timeout: 60
    failure_mode: "warn"
    
  - name: "install_router_if_selected" 
    command: "if [ '{{use_router}}' = 'true' ]; then npm install react-router-dom && npm install -D @types/react-router-dom; fi"
    working_directory: "."
    timeout: 30
    failure_mode: "warn"
    
  - name: "install_state_management"
    command: |
      case '{{state_management}}' in
        'zustand') npm install zustand ;;
        'redux-toolkit') npm install @reduxjs/toolkit react-redux ;;
        *) echo 'No additional state management to install' ;;
      esac
    working_directory: "."
    timeout: 30
    failure_mode: "warn"
    
  - name: "install_testing_frameworks"
    command: |
      if echo '{{testing_framework}}' | grep -q 'vitest'; then
        npm install -D vitest @testing-library/react @testing-library/jest-dom @testing-library/user-event jsdom
      fi
      if echo '{{testing_framework}}' | grep -q 'playwright'; then
        npm install -D @playwright/test && npx playwright install
      fi
    working_directory: "."
    timeout: 90
    failure_mode: "warn"

  - name: "initial_type_check"
    command: "npm run type-check"
    working_directory: "."
    timeout: 30
    failure_mode: "warn"

  - name: "setup_complete"
    command: "echo '✅ React TypeScript project {{project_name}} created successfully!'"
    working_directory: "."
    timeout: 5
    failure_mode: "continue"