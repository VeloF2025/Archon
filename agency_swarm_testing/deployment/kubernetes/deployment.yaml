apiVersion: v1
kind: Namespace
metadata:
  name: archon
  labels:
    name: archon
    app: agency-swarm

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: archon-config
  namespace: archon
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  NODE_ENV: "production"
  REACT_APP_API_URL: "http://archon-api-service.archon.svc.cluster.local:8000"
  REACT_APP_WS_URL: "ws://archon-api-service.archon.svc.cluster.local:8000"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: archon-secrets
  namespace: archon
type: Opaque
data:
  # Base64 encoded values (replace with actual encoded values)
  SUPABASE_URL: ""
  SUPABASE_SERVICE_KEY: ""
  OPENAI_API_KEY: ""
  POSTGRES_PASSWORD: ""
  GRAFANA_PASSWORD: ""

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: archon
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "archon"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: archon-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: archon
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
  volumes:
  - name: redis-storage
    emptyDir: {}

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: archon-frontend
  namespace: archon
spec:
  replicas: 3
  selector:
    matchLabels:
      app: archon-frontend
  template:
    metadata:
      labels:
        app: archon-frontend
    spec:
      containers:
      - name: frontend
        image: ghcr.io/your-org/archon-frontend:latest
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: archon-config
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5

---
# API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: archon-api
  namespace: archon
spec:
  replicas: 3
  selector:
    matchLabels:
      app: archon-api
  template:
    metadata:
      labels:
        app: archon-api
    spec:
      containers:
      - name: api
        image: ghcr.io/your-org/archon-api:latest
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: archon-config
        env:
        - name: SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: archon-secrets
              key: SUPABASE_URL
        - name: SUPABASE_SERVICE_KEY
          valueFrom:
            secretKeyRef:
              name: archon-secrets
              key: SUPABASE_SERVICE_KEY
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: archon-secrets
              key: OPENAI_API_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: archon-secrets
              key: POSTGRES_PASSWORD
        - name: DATABASE_URL
          value: "postgresql://postgres:$(POSTGRES_PASSWORD)@postgres-service:5432/archon"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}

---
# MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: archon-mcp
  namespace: archon
spec:
  replicas: 2
  selector:
    matchLabels:
      app: archon-mcp
  template:
    metadata:
      labels:
        app: archon-mcp
    spec:
      containers:
      - name: mcp
        image: ghcr.io/your-org/archon-mcp:latest
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: archon-config
        env:
        - name: SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: archon-secrets
              key: SUPABASE_URL
        - name: SUPABASE_SERVICE_KEY
          valueFrom:
            secretKeyRef:
              name: archon-secrets
              key: SUPABASE_SERVICE_KEY
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Agents Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: archon-agents
  namespace: archon
spec:
  replicas: 2
  selector:
    matchLabels:
      app: archon-agents
  template:
    metadata:
      labels:
        app: archon-agents
    spec:
      containers:
      - name: agents
        image: ghcr.io/your-org/archon-agents:latest
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: archon-config
        env:
        - name: SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: archon-secrets
              key: SUPABASE_URL
        - name: SUPABASE_SERVICE_KEY
          valueFrom:
            secretKeyRef:
              name: archon-secrets
              key: SUPABASE_SERVICE_KEY
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: archon-secrets
              key: OPENAI_API_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: archon-secrets
              key: POSTGRES_PASSWORD
        - name: DATABASE_URL
          value: "postgresql://postgres:$(POSTGRES_PASSWORD)@postgres-service:5432/archon"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        resources:
          requests:
            cpu: "300m"
            memory: "1Gi"
          limits:
            cpu: "1500m"
            memory: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: archon
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: archon
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: archon-frontend-service
  namespace: archon
spec:
  selector:
    app: archon-frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: archon-api-service
  namespace: archon
spec:
  selector:
    app: archon-api
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: archon-mcp-service
  namespace: archon
spec:
  selector:
    app: archon-mcp
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: archon-agents-service
  namespace: archon
spec:
  selector:
    app: archon-agents
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: archon-ingress
  namespace: archon
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - archon.yourdomain.com
    secretName: archon-tls
  rules:
  - host: archon.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: archon-frontend-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: archon-api-service
            port:
              number: 8000
      - path: /mcp
        pathType: Prefix
        backend:
          service:
            name: archon-mcp-service
            port:
              number: 8000
      - path: /agents
        pathType: Prefix
        backend:
          service:
            name: archon-agents-service
            port:
              number: 8000

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: archon-frontend-hpa
  namespace: archon
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: archon-frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: archon-api-hpa
  namespace: archon
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: archon-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Network Policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: archon-network-policy
  namespace: archon
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: archon
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: archon
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80