name: Agency Swarm CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy pytest pytest-asyncio pytest-cov
          pip install -r python/requirements.base.txt

      - name: Install Node.js dependencies
        run: |
          cd archon-ui-main
          npm ci

      - name: Run Python linting
        run: |
          ruff check python/src/
          ruff format --check python/src/
          mypy python/src/

      - name: Run Node.js linting
        run: |
          cd archon-ui-main
          npm run lint
          npm run type-check

      - name: Run security checks
        run: |
          # Run security linters
          pip install bandit safety
          bandit -r python/src/ -f json -o bandit-report.json
          safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-type: [python, nodejs]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        if: matrix.test-type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        if: matrix.test-type == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        if: matrix.test-type == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          pip install -r python/requirements.base.txt

      - name: Install Node.js dependencies
        if: matrix.test-type == 'nodejs'
        run: |
          cd archon-ui-main
          npm ci

      - name: Run Python unit tests
        if: matrix.test-type == 'python'
        run: |
          cd python
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Run Node.js unit tests
        if: matrix.test-type == 'nodejs'
        run: |
          cd archon-ui-main
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.test-type }}
          path: |
            python/coverage.xml
            python/htmlcov/
            archon-ui-main/coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio aiohttp requests docker kubernetes
          pip install -r python/requirements.base.txt

      - name: Start services
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 30

      - name: Run integration tests
        run: |
          python agency_swarm_testing/tests/integration_validation.py

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        with:
          name: integration-results
          path: agency_swarm_integration_report.json

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp matplotlib pandas statistics
          pip install -r python/requirements.base.txt

      - name: Start services
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 30

      - name: Run performance benchmarks
        run: |
          python agency_swarm_testing/performance/performance_benchmarks.py

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            agency_swarm_performance_report.json
            performance_charts/

  security-tests:
    name: Security & Compliance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp jwt bcrypt cryptography
          pip install -r python/requirements.base.txt

      - name: Start services
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 30

      - name: Run security tests
        run: |
          python agency_swarm_testing/tests/security_compliance_tests.py

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: agency_swarm_security_report.json

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, security-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio aiohttp requests
          pip install -r python/requirements.base.txt

      - name: Start services
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 60

      - name: Run E2E tests
        run: |
          python agency_swarm_testing/tests/agency_swarm_e2e_tests.py

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results
          path: agency_swarm_e2e_report.json

  deployment-tests:
    name: Deployment Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp docker kubernetes pyyaml requests
          pip install -r python/requirements.base.txt

      - name: Run deployment tests
        run: |
          python agency_swarm_testing/tests/deployment_tests.py

      - name: Upload deployment test results
        uses: actions/upload-artifact@v3
        with:
          name: deployment-results
          path: agency_swarm_deployment_report.json

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./archon-ui-main
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: ./python
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}-api
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, deployment-tests]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: '1.28.0'

      - name: Configure Kubernetes credentials
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          kubectl apply -f deployment/kubernetes/
          kubectl rollout status deployment/archon-frontend
          kubectl rollout status deployment/archon-api
          kubectl rollout status deployment/archon-mcp
          kubectl rollout status deployment/archon-agents

      - name: Run smoke tests
        run: |
          python agency_swarm_testing/tests/smoke_tests.py

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: '1.28.0'

      - name: Configure Kubernetes credentials
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Deploy to production
        run: |
          kubectl apply -f deployment/kubernetes/production/
          kubectl rollout status deployment/archon-frontend
          kubectl rollout status deployment/archon-api
          kubectl rollout status deployment/archon-mcp
          kubectl rollout status deployment/archon-agents

      - name: Run production validation
        run: |
          python agency_swarm_testing/tests/production_validation.py

  generate-reports:
    name: Generate Test Reports
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, e2e-tests, deployment-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate combined report
        run: |
          python agency_swarm_testing/scripts/generate_combined_report.py

      - name: Upload combined report
        uses: actions/upload-artifact@v3
        with:
          name: combined-test-report
          path: combined_test_report.html

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('combined_test_report.html', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🧪 Test Results Summary\n\n${report.substring(0, 6000)}...\n\n[View Full Report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });

  notify-team:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'

    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}