# Archon Project-Specific Agents Configuration
# Generated for AI Knowledge Management System with MCP integration

agents:
  # Core System Agents
  - name: "fastapi-neon-architect"
    type: "system-architect"
    description: "FastAPI + Neon PostgreSQL architecture specialist for microservices AI systems"
    skills: ["FastAPI", "Neon PostgreSQL", "Docker", "Socket.IO", "MCP protocol", "Database migrations"]
    quality_gates:
      - "Zero TypeScript compilation errors"
      - "Zero async/await violations"
      - "Proper error handling with Pydantic models"
      - "Database migration validation required"
    activation_commands: ["@fastapi-architect", "@archon-system"]
    project_patterns: ["python/src/server/", "python/src/mcp_server/", "migration/"]

  - name: "mcp-protocol-specialist"
    type: "api-design-architect"
    description: "MCP (Model Context Protocol) integration and HTTP-based server specialist"
    skills: ["MCP Protocol", "HTTP APIs", "FastAPI endpoints", "Tool execution", "SSE transport"]
    quality_gates:
      - "MCP tool schema validation"
      - "Zero HTTP endpoint errors"
      - "Proper error responses with status codes"
      - "Tool output validation required"
    activation_commands: ["@mcp-specialist", "@protocol-expert"]
    project_patterns: ["python/src/mcp_server/", "python/src/mcp_server/modules/"]

  - name: "pydantic-ai-agent-implementer"
    type: "code-implementer"
    description: "PydanticAI agent system specialist with validation enforcer"
    skills: ["PydanticAI", "Agent orchestration", "Validation systems", "AI/ML pipelines"]
    quality_gates:
      - "Zero Pydantic validation errors"
      - "Agent validation compliance"
      - "Anti-hallucination validation required"
      - "DGTS (Don't Game The System) compliance"
    activation_commands: ["@ai-agent-dev", "@pydantic-ai-coder"]
    project_patterns: ["python/src/agents/", "python/src/agents/validation/"]

  # Frontend React Specialists
  - name: "react-typescript-archon-expert"
    type: "code-implementer"
    description: "React 18+ TypeScript specialist for AI knowledge management UI"
    skills: ["React 18", "TypeScript strict mode", "Vite", "TailwindCSS", "Socket.IO client"]
    quality_gates:
      - "100% TypeScript type safety"
      - "Zero 'any' types allowed"
      - "Zero console.log statements"
      - "Bundle size <500kB per chunk"
      - "Proper error boundaries required"
    activation_commands: ["@react-archon", "@frontend-dev"]
    project_patterns: ["archon-ui-main/src/", "archon-ui-main/src/components/"]

  - name: "tailwind-neon-ui-designer"
    type: "ui-ux-optimizer"
    description: "TailwindCSS + Neon-themed UI specialist for dark mode AI interfaces"
    skills: ["TailwindCSS", "Dark mode design", "Responsive design", "Accessibility", "Animation"]
    quality_gates:
      - "WCAG 2.1 AA compliance"
      - "Mobile-first responsive design"
      - "Dark/light theme support"
      - "Performance: <1.5s page load"
    activation_commands: ["@ui-designer", "@neon-theme"]
    project_patterns: ["archon-ui-main/src/components/", "archon-ui-main/src/components/ui/"]

  # Database & Storage Specialists
  - name: "neon-postgresql-architect"
    type: "database-architect"
    description: "Neon PostgreSQL specialist with pgvector for embeddings and AI workloads"
    skills: ["Neon PostgreSQL", "pgvector", "Database migrations", "RAG indexing", "Connection pooling"]
    quality_gates:
      - "Zero SQL migration errors"
      - "Proper foreign key constraints"
      - "pgvector index validation"
      - "RAG schema compliance"
      - "Connection pool optimization"
    activation_commands: ["@db-architect", "@neon-expert"]
    project_patterns: ["migration/", "python/src/server/services/storage/", "python/src/database/"]

  - name: "rag-embedding-optimizer"
    type: "performance-optimizer"
    description: "RAG (Retrieval-Augmented Generation) and embedding systems specialist"
    skills: ["RAG systems", "Sentence transformers", "Vector search", "Embedding optimization"]
    quality_gates:
      - "Zero-length embedding validation"
      - "Embedding dimension consistency"
      - "Search performance <200ms"
      - "Knowledge graph integrity"
    activation_commands: ["@rag-optimizer", "@embedding-specialist"]
    project_patterns: ["python/src/server/services/search/", "python/src/server/services/embeddings/"]

  # Testing & Quality Specialists
  - name: "pytest-async-validator"
    type: "test-coverage-validator"
    description: "Pytest async testing specialist for FastAPI and Socket.IO systems"
    skills: ["Pytest", "Async testing", "Socket.IO testing", "API integration testing"]
    quality_gates:
      - ">95% test coverage required"
      - "Zero failing tests allowed"
      - "Async test pattern compliance"
      - "Integration test validation"
    activation_commands: ["@pytest-expert", "@async-tester"]
    project_patterns: ["python/tests/", "python/tests/test_api_essentials.py"]

  - name: "playwright-e2e-archon-tester"
    type: "test-coverage-validator"
    description: "Playwright E2E testing specialist for React AI interfaces"
    skills: ["Playwright", "E2E testing", "Component testing", "Accessibility testing"]
    quality_gates:
      - "All user journeys tested"
      - "Mobile/tablet/desktop coverage"
      - "Error boundary testing"
      - "Socket.IO real-time testing"
    activation_commands: ["@e2e-tester", "@playwright-expert"]
    project_patterns: ["archon-ui-main/tests/e2e/", "archon-ui-main/test/"]

  # Security & Performance Specialists
  - name: "ai-system-security-auditor"
    type: "security-auditor"
    description: "Security specialist for AI systems with MCP and agent validation"
    skills: ["AI security", "API security", "MCP protocol security", "Agent validation security"]
    quality_gates:
      - "OWASP Top 10 compliance"
      - "AI system security validation"
      - "Agent behavior security"
      - "Data privacy compliance"
    activation_commands: ["@security-auditor", "@ai-security"]
    project_patterns: ["python/src/agents/validation/", "python/src/server/security/"]

  - name: "docker-performance-optimizer"
    type: "performance-optimizer"
    description: "Docker Compose optimization specialist for microservices AI systems"
    skills: ["Docker", "Docker Compose", "Multi-service orchestration", "Performance tuning"]
    quality_gates:
      - "Container health checks required"
      - "Resource usage optimization"
      - "Service startup order validation"
      - "Network configuration security"
    activation_commands: ["@docker-optimizer", "@performance-tuner"]
    project_patterns: ["docker-compose.yml", "python/Dockerfile.*"]

  # Knowledge Management Specialists
  - name: "web-crawling-rag-specialist"
    type: "code-implementer"
    description: "Web crawling and RAG knowledge extraction specialist"
    skills: ["Crawl4ai", "BeautifulSoup", "Document processing", "Knowledge extraction"]
    quality_gates:
      - "Zero corrupted document storage"
      - "Proper content extraction validation"
      - "Crawling ethics compliance"
      - "Knowledge graph integrity"
    activation_commands: ["@crawling-expert", "@knowledge-extractor"]
    project_patterns: ["python/src/server/services/crawling/", "python/src/server/services/knowledge/"]

  - name: "socketio-realtime-specialist"
    type: "code-implementer"
    description: "Socket.IO real-time communication specialist for AI systems"
    skills: ["Socket.IO", "Real-time updates", "Event handling", "WebSocket management"]
    quality_gates:
      - "Zero connection leaks"
      - "Proper error handling"
      - "Event validation"
      - "Performance under load"
    activation_commands: ["@socketio-expert", "@realtime-dev"]
    project_patterns: ["python/src/server/api_routes/socketio_handlers.py", "archon-ui-main/src/hooks/useSocket.ts"]

  # Integration & Deployment Specialists
  - name: "mcp-integration-validator"
    type: "deployment-automation"
    description: "MCP integration and deployment specialist for AI coding assistants"
    skills: ["MCP integration", "Cursor/Windsurf compatibility", "Tool validation", "CI/CD"]
    quality_gates:
      - "MCP tool validation required"
      - "Zero deployment failures"
      - "Integration test compliance"
      - "Documentation completeness"
    activation_commands: ["@mcp-integrator", "@deployment-expert"]
    project_patterns: ["python/src/mcp_server/", "scripts/"]

generated_at: '2025-10-29T09:45:00.000000'
project_complexity: 9.2  # High complexity AI system with multiple services
project_type: "AI Knowledge Management System"
primary_languages: ["Python", "TypeScript"]
frameworks: ["FastAPI", "React 18", "Neon PostgreSQL", "Docker", "MCP"]
architecture: "Microservices with AI agents and real-time communication"

knowledge_integration:
  auto_learning: true
  enabled: true
  knowledge_api: http://localhost:3737
  sync_interval_hours: 24
  project_id: 'archon-ai-knowledge-system'
  project_path: C:\Jarvis\AI Workspace\Archon

# Project-Specific Quality Gates (Zero Tolerance)
project_quality_gates:
  critical_blocking_rules:
    - "ZERO TypeScript compilation errors"
    - "ZERO console.log statements in production code"
    - "ZERO undefined error references in catch blocks"
    - "ZERO Pydantic validation errors"
    - "ZERO async/await violations"
    - "ZERO MCP tool schema violations"
    - "ZERO Docker health check failures"
    - "ZERO Neon PostgreSQL migration errors"

  performance_requirements:
    - "Page load time <1.5s"
    - "API response time <200ms"
    - "Bundle size <500kB per chunk"
    - "Docker container startup <60s"
    - "Socket.IO connection <100ms"

  coverage_requirements:
    - "Python test coverage >95%"
    - "Frontend test coverage >90%"
    - "E2E user journey coverage 100%"
    - "API endpoint coverage 100%"

  security_requirements:
    - "OWASP Top 10 compliance"
    - "AI system security validation"
    - "MCP protocol security"
    - "Agent behavior security validation"
    - "Data privacy compliance"

# Anti-Gaming Enforcement (DGTS)
dgts_enforcement:
  enabled: true
  auto_block_agents: true
  gaming_threshold: 0.3
  validation_patterns:
    - "fake_implementations"
    - "commented_validation_rules"
    - "mock_data_returns"
    - "meaningless_tests"
    - "validation_bypass_attempts"

# Documentation-Driven Development
doc_driven_development:
  enabled: true
  test_before_implementation: true
  required_docs: ["PRD", "PRP", "ADR"]
  validation_required: true

# Project Configuration Summary
project_summary: |
  Archon is a sophisticated AI knowledge management system featuring:
  - FastAPI + Socket.IO backend with real-time communication
  - React 18 + TypeScript frontend with dark theme
  - Neon PostgreSQL database with pgvector for embeddings
  - MCP (Model Context Protocol) integration for AI coding assistants
  - Multi-agent AI system with validation and anti-gaming enforcement
  - Web crawling and RAG capabilities for knowledge extraction
  - Docker Compose microservices architecture
  - Comprehensive testing with pytest, Vitest, and Playwright
  - Zero-tolerance quality gates with automated validation